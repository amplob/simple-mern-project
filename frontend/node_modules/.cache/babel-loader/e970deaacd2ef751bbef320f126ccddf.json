{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marc\\\\Downloads\\\\simple-mern-project\\\\simple-mern-project\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewHabit from './components/Habits/NewHabit';\nimport HabitList from './components/Habits/HabitList';\nimport './App.css';\n\nfunction App() {\n  const [loadedHabits, setLoadedHabits] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchHabits = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/habits');\n      const responseData = await response.json();\n      setLoadedHabits(responseData.habits);\n      setIsLoading(false);\n    };\n\n    fetchHabits();\n  }, []);\n\n  const deleteHabitHandler = async HabitName => {\n    try {\n      const newHabit = {\n        title: HabitName\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/habits', {\n        method: 'POST',\n        body: JSON.stringify(newHabit),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedHabits(prevHabits => {\n        return prevHabits.concat({ ...newHabit,\n          id: responseData.habit.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  const addHabitHandler = async HabitName => {\n    try {\n      const newHabit = {\n        title: HabitName\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/habits', {\n        method: 'POST',\n        body: JSON.stringify(newHabit),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedHabits(prevHabits => {\n        return prevHabits.concat({ ...newHabit,\n          id: responseData.habit.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  }; // const addProductHandler = async (productName, productPrice) => {\n  //   try {\n  //     const newProduct = {\n  //       title: productName,\n  //       price: +productPrice // \"+\" to convert string to number\n  //     };\n  //     let hasError = false;\n  //     const response = await fetch('http://localhost:5000/product', {\n  //       method: 'POST',\n  //       body: JSON.stringify(newProduct),\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       }\n  //     });\n  //     if (!response.ok) {\n  //       hasError = true;\n  //     }\n  //     const responseData = await response.json();\n  //     if (hasError) {\n  //       throw new Error(responseData.message);\n  //     }\n  //     setLoadedProducts(prevProducts => {\n  //       return prevProducts.concat({\n  //         ...newProduct,\n  //         id: responseData.product.id\n  //       });\n  //     });\n  //   } catch (error) {\n  //     alert(error.message || 'Something went wrong!');\n  //   }\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewHabit, {\n    onAddHabit: addHabitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && /*#__PURE__*/React.createElement(HabitList, {\n    items: loadedHabits,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 24\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/marc/Downloads/simple-mern-project/simple-mern-project/frontend/src/App.js"],"names":["React","useState","useEffect","Header","NewHabit","HabitList","App","loadedHabits","setLoadedHabits","isLoading","setIsLoading","fetchHabits","response","fetch","responseData","json","habits","deleteHabitHandler","HabitName","newHabit","title","hasError","method","body","JSON","stringify","headers","ok","Error","message","prevHabits","concat","id","habit","error","alert","addHabitHandler"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header/Header';\nimport NewHabit from './components/Habits/NewHabit';\nimport HabitList from './components/Habits/HabitList';\nimport './App.css';\n\nfunction App() {\n  const [loadedHabits, setLoadedHabits] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchHabits = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/habits');\n\n      const responseData = await response.json();\n\n      setLoadedHabits(responseData.habits);\n      setIsLoading(false);\n    };\n\n    fetchHabits();\n  }, []);\n\n\n  const deleteHabitHandler = async (HabitName) => {\n    try {\n      const newHabit = {\n        title: HabitName,\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/habits', {\n        method: 'POST',\n        body: JSON.stringify(newHabit),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedHabits(prevHabits => {\n        return prevHabits.concat({\n          ...newHabit,\n          id: responseData.habit.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n\n\n\n\n\n  const addHabitHandler = async (HabitName) => {\n    try {\n      const newHabit = {\n        title: HabitName,\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/habits', {\n        method: 'POST',\n        body: JSON.stringify(newHabit),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedHabits(prevHabits => {\n        return prevHabits.concat({\n          ...newHabit,\n          id: responseData.habit.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n\n  // const addProductHandler = async (productName, productPrice) => {\n  //   try {\n  //     const newProduct = {\n  //       title: productName,\n  //       price: +productPrice // \"+\" to convert string to number\n  //     };\n  //     let hasError = false;\n  //     const response = await fetch('http://localhost:5000/product', {\n  //       method: 'POST',\n  //       body: JSON.stringify(newProduct),\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       }\n  //     });\n\n  //     if (!response.ok) {\n  //       hasError = true;\n  //     }\n\n  //     const responseData = await response.json();\n\n  //     if (hasError) {\n  //       throw new Error(responseData.message);\n  //     }\n\n  //     setLoadedProducts(prevProducts => {\n  //       return prevProducts.concat({\n  //         ...newProduct,\n  //         id: responseData.product.id\n  //       });\n  //     });\n  //   } catch (error) {\n  //     alert(error.message || 'Something went wrong!');\n  //   }\n  // };\n\n  return (\n    <React.Fragment>\n      <Header />\n      <main>\n        <NewHabit onAddHabit={addHabitHandler} />\n        {isLoading && <p className=\"loader\">Loading...</p>}\n        {!isLoading && <HabitList items={loadedHabits} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}