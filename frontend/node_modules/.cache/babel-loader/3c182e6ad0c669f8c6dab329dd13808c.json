{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marc\\\\Downloads\\\\simple-mern-project\\\\simple-mern-project\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\nimport NewHabit from './components/Habits/NewHabit';\nimport HabitList from './components/Habits/HabitList';\nimport './App.css';\n\nfunction App() {\n  const [loadedHabits, setLoadedHabits] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchHabits = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000');\n      const responseData = await response.json();\n      setLoadedHabits(responseData.habits);\n      setIsLoading(false);\n    };\n\n    fetchHabits();\n  }, []);\n\n  const addHabitHandler = async HabitName => {\n    try {\n      const newHabit = {\n        title: habitName\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000', {\n        method: 'POST',\n        body: JSON.stringify(newHabit),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedHabits(prevHabits => {\n        return prevHabits.concat({ ...newHabit,\n          id: responseData.habit.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  const addProductHandler = async (productName, productPrice) => {\n    try {\n      const newProduct = {\n        title: productName,\n        price: +productPrice // \"+\" to convert string to number\n\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/product', {\n        method: 'POST',\n        body: JSON.stringify(newProduct),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedProducts(prevProducts => {\n        return prevProducts.concat({ ...newProduct,\n          id: responseData.product.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewProduct, {\n    onAddProduct: addProductHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && /*#__PURE__*/React.createElement(ProductList, {\n    items: loadedProducts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 24\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/marc/Downloads/simple-mern-project/simple-mern-project/frontend/src/App.js"],"names":["React","useState","useEffect","Header","NewProduct","ProductList","NewHabit","HabitList","App","loadedHabits","setLoadedHabits","isLoading","setIsLoading","fetchHabits","response","fetch","responseData","json","habits","addHabitHandler","HabitName","newHabit","title","habitName","hasError","method","body","JSON","stringify","headers","ok","Error","message","prevHabits","concat","id","habit","error","alert","addProductHandler","productName","productPrice","newProduct","price","setLoadedProducts","prevProducts","product","loadedProducts"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\nimport NewHabit from './components/Habits/NewHabit';\nimport HabitList from './components/Habits/HabitList';\nimport './App.css';\n\nfunction App() {\n  const [loadedHabits, setLoadedHabits] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchHabits = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000');\n\n      const responseData = await response.json();\n\n      setLoadedHabits(responseData.habits);\n      setIsLoading(false);\n    };\n\n    fetchHabits();\n  }, []);\n\n\n  const addHabitHandler = async (HabitName) => {\n    try {\n      const newHabit = {\n        title: habitName,\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000', {\n        method: 'POST',\n        body: JSON.stringify(newHabit),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedHabits(prevHabits => {\n        return prevHabits.concat({\n          ...newHabit,\n          id: responseData.habit.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n\n  const addProductHandler = async (productName, productPrice) => {\n    try {\n      const newProduct = {\n        title: productName,\n        price: +productPrice // \"+\" to convert string to number\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/product', {\n        method: 'POST',\n        body: JSON.stringify(newProduct),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedProducts(prevProducts => {\n        return prevProducts.concat({\n          ...newProduct,\n          id: responseData.product.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Header />\n      <main>\n        <NewProduct onAddProduct={addProductHandler} />\n        {isLoading && <p className=\"loader\">Loading...</p>}\n        {!isLoading && <ProductList items={loadedProducts} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}